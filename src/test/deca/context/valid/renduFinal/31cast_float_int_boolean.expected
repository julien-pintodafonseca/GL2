`> [10, 0] Program
   +> ListDeclClass [List with 0 elements]
   `> [10, 0] Main
      +> ListDeclVar [List with 6 elements]
      |  []> [11, 8] DeclVar
      |  ||  +> [11, 4] Identifier (int)
      |  ||  |  definition: type (builtin), type=int
      |  ||  +> [11, 8] Identifier (x)
      |  ||  |  definition: variable defined at [11, 8], type=int
      |  ||  `> [11, 10] Initialization
      |  ||     `> [11, 12] Int (2)
      |  ||        type: int
      |  []> [12, 8] DeclVar
      |  ||  +> [12, 4] Identifier (int)
      |  ||  |  definition: type (builtin), type=int
      |  ||  +> [12, 8] Identifier (y)
      |  ||  |  definition: variable defined at [12, 8], type=int
      |  ||  `> NoInitialization
      |  []> [13, 12] DeclVar
      |  ||  +> [13, 4] Identifier (boolean)
      |  ||  |  definition: type (builtin), type=boolean
      |  ||  +> [13, 12] Identifier (a)
      |  ||  |  definition: variable defined at [13, 12], type=boolean
      |  ||  `> [13, 14] Initialization
      |  ||     `> [13, 16] BooleanLiteral (true)
      |  ||        type: boolean
      |  []> [14, 12] DeclVar
      |  ||  +> [14, 4] Identifier (boolean)
      |  ||  |  definition: type (builtin), type=boolean
      |  ||  +> [14, 12] Identifier (b)
      |  ||  |  definition: variable defined at [14, 12], type=boolean
      |  ||  `> NoInitialization
      |  []> [15, 10] DeclVar
      |  ||  +> [15, 4] Identifier (float)
      |  ||  |  definition: type (builtin), type=float
      |  ||  +> [15, 10] Identifier (z)
      |  ||  |  definition: variable defined at [15, 10], type=float
      |  ||  `> [15, 12] Initialization
      |  ||     `> [15, 14] Float (2.3)
      |  ||        type: float
      |  []> [16, 10] DeclVar
      |      +> [16, 4] Identifier (float)
      |      |  definition: type (builtin), type=float
      |      +> [16, 10] Identifier (t)
      |      |  definition: variable defined at [16, 10], type=float
      |      `> NoInitialization
      `> ListInst [List with 6 elements]
         []> [17, 6] Assign
         ||  type: int
         ||  +> [17, 4] Identifier (y)
         ||  |  definition: variable defined at [12, 8], type=int
         ||  `> [17, 8] Cast
         ||     type: int
         ||     +> [17, 9] Identifier (int)
         ||     |  definition: type (builtin), type=int
         ||     `> [17, 14] Identifier (x)
         ||        definition: variable defined at [11, 8], type=int
         []> [18, 6] Assign
         ||  type: boolean
         ||  +> [18, 4] Identifier (b)
         ||  |  definition: variable defined at [14, 12], type=boolean
         ||  `> [18, 8] Cast
         ||     type: boolean
         ||     +> [18, 9] Identifier (boolean)
         ||     |  definition: type (builtin), type=boolean
         ||     `> [18, 18] Identifier (a)
         ||        definition: variable defined at [13, 12], type=boolean
         []> [19, 6] Assign
         ||  type: float
         ||  +> [19, 4] Identifier (t)
         ||  |  definition: variable defined at [16, 10], type=float
         ||  `> [19, 8] Cast
         ||     type: float
         ||     +> [19, 9] Identifier (float)
         ||     |  definition: type (builtin), type=float
         ||     `> [19, 16] Identifier (z)
         ||        definition: variable defined at [15, 10], type=float
         []> [21, 4] Println
         ||  `> ListExpr [List with 2 elements]
         ||     []> [21, 12] StringLiteral ( y = )
         ||     ||  type: string
         ||     []> [21, 20] Identifier (y)
         ||         definition: variable defined at [12, 8], type=int
         []> [22, 4] Println
         ||  `> ListExpr [List with 2 elements]
         ||     []> [22, 12] StringLiteral ( t = )
         ||     ||  type: string
         ||     []> [22, 20] Identifier (t)
         ||         definition: variable defined at [16, 10], type=float
         []> [23, 4] IfThenElse
             +> [23, 7] Identifier (b)
             |  definition: variable defined at [14, 12], type=boolean
             +> ListInst [List with 1 elements]
             |  []> [24, 5] Println
             |      `> ListExpr [List with 1 elements]
             |         []> [24, 13] StringLiteral (OK)
             |             type: string
             `> ListInst [List with 0 elements]
